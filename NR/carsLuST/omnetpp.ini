# Example simulation for integrating veins (http://veins.car2x.org/) with Simu5G
# 
# Requirements:
#       You need to enable the feature "Simu5G Cars" for this simulation
#       (Project->Properties->OMNeT++->Project Features)
#
#       You need to import the "veins" project and its subproject
#       "veins_inet" in your workspace.
[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
image-path = ../../images
network = simu5g.simulations.NR.carsLuST.FiveGWorld

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = false

sim-time-limit = 12h
#warmup-period = 10h
warmup-period = 0h

**.scalar-recording = false
**.vector-recording = false
#**.sctp.**.scalar-recording = false
#**.sctp.**.vector-recording = false

**.routingRecorder.enabled = false

#*.playgroundSizeX = playgroundSizeX
#*.playgroundSizeY = playgroundSizeY
#*.playgroundSizeZ = playgroundSizeZ
**.mobility.constraintAreaMaxX = 1500m
**.mobility.constraintAreaMaxY = 1500m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 50m



**.numGNodeBs = 47 # 3
**.numBgCells = 9
#**.numUes = 5
**.numBgUes = 15

##########################################################
#            VeinsManager parameters                     #
##########################################################
*.veinsManager.host = "localhost"       # if traci-launchd runs on localhost
#*.veinsManager.port = 5200
#*.veinsManager.host = "sumo"       # traci-launchd on different host/container
*.veinsManager.moduleType = "simu5g.nodes.cars.NRCar"
*.veinsManager.moduleName = "car"
*.veinsManager.launchConfig = xmldoc("lust.launchd.xml")
*.veinsManager.updateInterval = 0.1s
*.veinsManager.firstStepAt = 0h

##########################################################
#                      Mobility                          #
##########################################################
*.car[*].mobility.typename = "VeinsInetMobility"
#**.mobility.initFromDisplayString = false # TODO: This could substitute the .ned file parameter for gnbs



##########################################################
#          Mobile network specific parameters            #
##########################################################

# Number of Resource Blocks
**.numBands = 25 

# Transmission Power
**.ueTxPower = 26
**.eNodeBTxPower = 46

# Enable dynamic association of UEs (based on best SINR)
*.car[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.car[*].masterId = 0     # ignored if dynamic association is disabled
*.car[*].macCellId = 0    # ignored if dynamic association is disabled
*.car[*].nrMasterId = 1     # ignored if dynamic association is disabled
*.car[*].nrMacCellId = 1    # ignored if dynamic association is disabled

# gNodeB configuration (example with 3 gNodeBs)
#**.gNodeB[0].macCellId = 1
#**.gNodeB[0].macNodeId = 1
#**.gNodeB[0].mobility.initialX = 189.72941151164468m
#**.gNodeB[0].mobility.initialY = 598.2320987483863m
#**.gNodeB[0].mobility.initialZ = 3m

#**.gNodeB[1].macCellId = 2
#**.gNodeB[1].macNodeId = 2
#**.gNodeB[1].mobility.initialX = 764.6275113429501m
#**.gNodeB[1].mobility.initialY = 746.4787137773264m
#**.gNodeB[1].mobility.initialZ = 3m

#**.gNodeB[2].macCellId = 3
#**.gNodeB[2].macNodeId = 3
#**.gNodeB[2].mobility.initialX = 891.6433080744091m
#**.gNodeB[2].mobility.initialY = 270.77911356784443m
#**.gNodeB[2].mobility.initialZ = 3m

include base_stations.ini # We need more dynamic basestations to allow to simply import them here

*.gNodeB[*].cellularNic.bgTrafficGenerator[*].numBgUes = numBgUes

*.bgCell[*].bgTrafficGenerator.numBgUes = numBgUes
*.bgCell[*].bgScheduler.isNr = true
*.bgCell[*].bgScheduler.numBands = 100
*.bgCell[*].bgScheduler.numerologyIndex = 4

######### CQI and HARQ parameters for background UEs
include backgroundTrafficGeneratorConfigs/config-u=4-rbs=100-numBgCells=9-numBkUEs=15-dist=50m-repetition=0.ini

#*.bgCell[*].mobility.constraintAreaMinX = 0m
#*.bgCell[*].mobility.constraintAreaMinY = 0m
#*.bgCell[*].mobility.constraintAreaMinZ = 0m
#*.bgCell[*].mobility.constraintAreaMaxX = playgroundSizeX
#*.bgCell[*].mobility.constraintAreaMaxY = playgroundSizeY
#*.bgCell[*].mobility.constraintAreaMaxZ = playgroundSizeZ

**.bgCell_interference = true  


# Enable handover
*.car[*].cellularNic.nrPhy.enableHandover = true
*.gNodeB[*].cellularNic.phy.enableHandover = true
*.gNodeB[*].cellularNic.phy.handoverLatency = 50ms
*.gNodeB[*].cellInfo.broadcastMessageInterval = 1s # eNB will sends broadcast triggers every second

# X2 and SCTP configuration
*.gNodeB[*].numX2Apps = 2    # 2 x2App per peering eNodeB
*.gNodeB[*].x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

include base_stations_config.ini



**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

#**.dualConnectivityEnabled = true


# ----------------------------------------------------------------------------- #
# Config "VoIP-Uplink"
#
[Config VoIP-UL]

##########################################################
#                    App Layer                           #
##########################################################
*.server.numApps = 10
*.server.app[*].typename = "VoIPReceiver"
*.server.app[*].localPort = 3000 + ancestorIndex(0) 

*.car[*].numApps = 1
*.car[*].app[0].typename = "VoIPSender"
*.car[*].app[0].destAddress = "server"
*.car[*].app[0].destPort = 3000 + ancestorIndex(1)


# ----------------------------------------------------------------------------- #
# Config "VoIP-Downlink"
#
[Config VoIP-DL]

##########################################################
#                    App Layer                           #
##########################################################
*.server.numApps = 10
*.server.app[*].typename = "VoIPSender"
*.server.app[*].localPort = 2000 + ancestorIndex(0) 
*.server.app[*].destAddress = "car[" + string(ancestorIndex(0)) + "]"
*.server.app[*].startTime = 0.05s


*.car[*].numApps = 1
*.car[*].app[0].typename = "VoIPReceiver"

[Config VoIP]

##########################################################
#                    App Layer                           #
##########################################################
**.amcMode = "D2D"

*.car[*].cellularNic = "LteNicUe"
*.gNodeB[*].cellularNic = "LteNicEnb"

*.car[*].ipv4.configurator.mcastGroups = "224.0.0.10"

*.car[*].numApps = 2
*.car[*].app[0].typename = "VoIPSender"
*.car[*].app[0].localPort = 2000 + ancestorIndex(0)
*.car[*].app[0].destAddress = "car[0]"


*.car[*].app[1].typename = "VoIPReceiver"

[Config D2DMulticast]


# Clean the logs of everything that is not car or gNodeB
**.car*.**.scalar-recording = true
**.car*.**.vector-recording = true
**.gNodeB*.**.scalar-recording = true
**.gNodeB*.**.vector-recording = true
**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false

### Enable D2D for the eNodeB and the UEs involved in direct communications ###
#*.eNodeB*.nicType = "LteNicEnbD2D"
*.car[*].nicType = "NRNicUe"
*.gNodeB[*].nicType = "NRNicEnb"

#*.car[*].cellularNic.nrPhy.d2dTxPower = 1

#*.car[*].cellularNic.phy.enableMulticastD2DRangeCheck = true
#*.car[*].cellularNic.phy.multicastD2DRange = 100m

*.car[*].cellularNic.d2dInitialMode = true
*.car[*].cellularNic.d2dCapable = true

#*.eNodeB*.cellularNic.d2dModeSelection = true
#*.eNodeB*.cellularNic.d2dInitialMode = true


**.amcMode = "D2D"

### Select CQI for D2D transmissions ###
# One-to-Many communications work with fixed CQI values only.
# Set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
**.enableD2DCqiReporting = false
**.usePreconfiguredTxParams = true
**.d2dCqi = 7 # ${cqi=7}

### Traffic configuration ###
*.car[*].numApps = 2


# --- 1st group: 0 < 1 < 2 < 3 -- #
*.car[*].ipv4.configurator.mcastGroups = "224.0.0.10"

# transmitter
*.car[*].app[0].typename = "AlertSender"
*.car[*].app[0].localPort = 3088+ancestorIndex(0) 
*.car[*].app[0].startTime = uniform(0s,0.02s)
*.car[*].app[0].destAddress = "224.0.0.10"          # IP address of the multicast group 
*.car[*].app[0].destPort = 1000
# receivers
*.car[*].app[1].typename = "AlertReceiver"
*.car[*].app[1].localPort = 1000



[Config multicastThroughBs]




# Clean the logs of everything that is not car or gNodeB
**.car*.**.scalar-recording = true
**.car*.**.vector-recording = true
**.gNodeB*.**.scalar-recording = true
**.gNodeB*.**.vector-recording = true
**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false

### Enable D2D for the eNodeB and the UEs involved in direct communications ###
#*.eNodeB*.nicType = "LteNicEnbD2D"
*.car[*].nicType = "NRNicUe"
*.gNodeB[*].nicType = "NRNicEnb"



*.car[*].numApps = 2


# --- 1st group: 0 < 1 < 2 < 3 -- #
*.car[*].ipv4.configurator.mcastGroups = "224.0.0.10"

# transmitter
*.car[*].app[0].typename = "AlertSender"
*.car[*].app[0].localPort = 3088+ancestorIndex(0) 
*.car[*].app[0].startTime = uniform(0s,0.02s)
*.car[*].app[0].destAddress = "server"          # IP address of the multicast group 
*.car[*].app[0].destPort = 3000 + ancestorIndex(0)
# receivers
*.car[*].app[1].typename = "AlertReceiver"
#*.car[*].app[1].localAdress = "224.0.0.1"
*.car[*].app[1].localPort = 1000

*.server.numApps = 10
*.server.app[*].typename = "AlertReceiver"
*.server.app[*].localPort = 3000 + ancestorIndex(0)

#*.router.interfaceTable.multicastForwarding = true
#*.router.hasPim = true
#*.router.interfaceTable.pimInterface = true

